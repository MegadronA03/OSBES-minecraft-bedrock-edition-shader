// __multiversion__

#include "vertexVersionCentroid.h"

#include "uniformWorldConstants.h"
#include "uniformPerFrameConstants.h"
#include "uniformShaderConstants.h"
#include "uniformRenderChunkConstants.h"

attribute mediump vec4 POSITION;

attribute vec4 COLOR;
attribute vec2 TEXCOORD_0;
attribute vec2 TEXCOORD_1;

#if __VERSION__ >= 300
	#ifndef BYPASS_PIXEL_SHADER
		_centroid out vec2 uv0;
		_centroid out vec2 uv1;
	#endif
#else
	#ifndef BYPASS_PIXEL_SHADER
		varying vec2 uv0;
		varying vec2 uv1;
	#endif
#endif
// Passing color so we can avoid having an extra shader and just use renderchunk.fragment



void main() {
	vec3 inputPos = POSITION.xyz * CHUNK_ORIGIN_AND_SCALE.w + CHUNK_ORIGIN_AND_SCALE.xyz;
	vec3 center = inputPos + vec3(0.5, 0.5, 0.5);

	// The view position needs to be in sortof-steve space (?)
	// The translation seems to be already embedded for some reason.
	vec3 viewPos = VIEW_POS * CHUNK_ORIGIN_AND_SCALE.w;

	vec3 forward = normalize(center - viewPos);
	// Not orthogonal so need to normalize
	vec3 right = normalize(cross(vec3(0.0, 1.0, 0.0), forward));
	// Orthogonal so don't need to normalize
	vec3 up = cross(forward, right);


	// color is only positive, so we have to offset by .5
	// We have to subtract because we passed in uvs

	// We multiply our offsets by the basis vectors and subtract them to get our verts
	vec3 vertPos = center - up * (COLOR.z - 0.5) - right * (COLOR.x - 0.5);


	gl_Position = WORLDVIEW * vec4( vertPos, 1.0 );
	gl_Position = PROJ * gl_Position;

	uv0 = TEXCOORD_0;
	uv1 = TEXCOORD_1;

	// color is hardcoded white
	color = vec4(1.0, 1.0, 1.0, 1.0);

// __multiversion__

#include "vertexVersionCentroid.h"

#include "uniformWorldConstants.h"
#include "uniformPerFrameConstants.h"
#include "uniformShaderConstants.h"
#include "uniformRenderChunkConstants.h"

attribute mediump vec4 POSITION;

attribute vec4 COLOR;
attribute vec2 TEXCOORD_0;
attribute vec2 TEXCOORD_1;

#if __VERSION__ >= 300
	#ifndef BYPASS_PIXEL_SHADER
		_centroid out vec2 uv0;
		_centroid out vec2 uv1;
	#endif
#else
	#ifndef BYPASS_PIXEL_SHADER
		varying vec2 uv0;
		varying vec2 uv1;
	#endif
#endif
// Passing values so we can avoid having an extra shader and just use renderchunk.fragment
varying vec4 color;

varying float isRain;
varying float isWater;
varying float isUnderWater;
varying highp vec4 position;// Get pixel position in world space (used for calculate fake normals)
varying vec4 relativePosition;// Calculates from vec4 position
//#ifdef FOG
varying vec4 fogColor;
varying vec4 milkyFog;
varying vec4 distanceFog;


void main() {
  vec3 inputPos = POSITION.xyz * CHUNK_ORIGIN_AND_SCALE.w + CHUNK_ORIGIN_AND_SCALE.xyz;
  vec3 center = inputPos + vec3(0.5, 0.5, 0.5);

  // The view position needs to be in sortof-steve space (?)
  // The translation seems to be already embedded for some reason.
  vec3 viewPos = VIEW_POS * CHUNK_ORIGIN_AND_SCALE.w;

  vec3 forward = normalize(center - viewPos);
  // Not orthogonal so need to normalize
  vec3 right = normalize(cross(vec3(0.0, 1.0, 0.0), forward));
  // Orthogonal so don't need to normalize
  vec3 up = cross(forward, right);


  // color is only positive, so we have to offset by .5
  // We have to subtract because we passed in uvs

  // We multiply our offsets by the basis vectors and subtract them to get our verts
  vec3 vertPos = center - up * (COLOR.z - 0.5) - right * (COLOR.x - 0.5);


  gl_Position = WORLDVIEW * vec4( vertPos, 1.0 );
  gl_Position = PROJ * gl_Position;
  
  uv0 = TEXCOORD_0;
  uv1 = TEXCOORD_1;

//copied from renderchunck.vertex
  position = POSITION;
  POS4 worldPos;

  #ifdef AS_ENTITY_RENDERER
	POS4 worldViewPosScaled = WORLDVIEWPROJ * position;
	worldPos = worldViewPosScaled;
  #else
	worldPos.xyz = (position.xyz * CHUNK_ORIGIN_AND_SCALE.w) + CHUNK_ORIGIN_AND_SCALE.xyz;
	worldPos.w = 1.0;

	// Transform to view space before projection instead of all at once to avoid floating point errors
	// Not required for entities because they are already offset by camera translation before rendering
	// World position here is calculated above and can get huge
	POS4 worldViewPosScaled = WORLDVIEW * worldPos;
        worldViewPosScaled = PROJ * worldViewPosScaled;
  #endif //AS_ENTITY_RENDERER


  relativePosition.xyz = -worldPos.xyz;
  relativePosition.w = worldPos.w;
  
  // default values for renderchunck.fragment
  isRain = 0.0;
  isWater = 0.0;
  isUnderWater = 0.0;
  fogColor = vec4(0.0);
  milkyFog = vec4(0.0);
  distanceFog = vec4(0.0);
  color = vec4(1.0, 1.0, 1.0, 1.0);
  
}
